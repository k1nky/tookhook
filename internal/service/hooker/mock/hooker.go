// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=mock/hooker.go -package=mock taskqueue
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/k1nky/tookhook/internal/entity"
	plugin "github.com/k1nky/tookhook/pkg/plugin"
	gomock "go.uber.org/mock/gomock"
)

// MockrulesStore is a mock of rulesStore interface.
type MockrulesStore struct {
	ctrl     *gomock.Controller
	recorder *MockrulesStoreMockRecorder
}

// MockrulesStoreMockRecorder is the mock recorder for MockrulesStore.
type MockrulesStoreMockRecorder struct {
	mock *MockrulesStore
}

// NewMockrulesStore creates a new mock instance.
func NewMockrulesStore(ctrl *gomock.Controller) *MockrulesStore {
	mock := &MockrulesStore{ctrl: ctrl}
	mock.recorder = &MockrulesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrulesStore) EXPECT() *MockrulesStoreMockRecorder {
	return m.recorder
}

// GetIncomeHookByName mocks base method.
func (m *MockrulesStore) GetIncomeHookByName(ctx context.Context, name string) *entity.Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeHookByName", ctx, name)
	ret0, _ := ret[0].(*entity.Hook)
	return ret0
}

// GetIncomeHookByName indicates an expected call of GetIncomeHookByName.
func (mr *MockrulesStoreMockRecorder) GetIncomeHookByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeHookByName", reflect.TypeOf((*MockrulesStore)(nil).GetIncomeHookByName), ctx, name)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *Mocklogger) Debugf(template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockloggerMockRecorder) Debugf(template any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*Mocklogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *Mocklogger) Errorf(template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockloggerMockRecorder) Errorf(template any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*Mocklogger)(nil).Errorf), varargs...)
}

// Mockpluginmanager is a mock of pluginmanager interface.
type Mockpluginmanager struct {
	ctrl     *gomock.Controller
	recorder *MockpluginmanagerMockRecorder
}

// MockpluginmanagerMockRecorder is the mock recorder for Mockpluginmanager.
type MockpluginmanagerMockRecorder struct {
	mock *Mockpluginmanager
}

// NewMockpluginmanager creates a new mock instance.
func NewMockpluginmanager(ctrl *gomock.Controller) *Mockpluginmanager {
	mock := &Mockpluginmanager{ctrl: ctrl}
	mock.recorder = &MockpluginmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpluginmanager) EXPECT() *MockpluginmanagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockpluginmanager) Get(name string) plugin.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(plugin.Plugin)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockpluginmanagerMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockpluginmanager)(nil).Get), name)
}

// Mocktaskqueue is a mock of taskqueue interface.
type Mocktaskqueue struct {
	ctrl     *gomock.Controller
	recorder *MocktaskqueueMockRecorder
}

// MocktaskqueueMockRecorder is the mock recorder for Mocktaskqueue.
type MocktaskqueueMockRecorder struct {
	mock *Mocktaskqueue
}

// NewMocktaskqueue creates a new mock instance.
func NewMocktaskqueue(ctrl *gomock.Controller) *Mocktaskqueue {
	mock := &Mocktaskqueue{ctrl: ctrl}
	mock.recorder = &MocktaskqueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktaskqueue) EXPECT() *MocktaskqueueMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *Mocktaskqueue) Enqueue(ctx context.Context, queueTask *entity.QueueTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, queueTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MocktaskqueueMockRecorder) Enqueue(ctx, queueTask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*Mocktaskqueue)(nil).Enqueue), ctx, queueTask)
}

// Process mocks base method.
func (m *Mocktaskqueue) Process(ctx context.Context, handler entity.TaskHandlerFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MocktaskqueueMockRecorder) Process(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*Mocktaskqueue)(nil).Process), ctx, handler)
}
